# List of operations supported
type Query {
    # Get a disease by diseaseId
    disease(diseaseId: String!): Disease
    # Get a protein by accession
    protein(accession: String!): Protein
    # Search diseases by part of the name or description
    diseases(filter: DiseaseFilter, page: Int = 0, size: Int = 25): [Disease!]
}

type Disease {
    diseaseId: String!
    diseaseName: String!
    description: String
    acronym: String
    source: String
    note: String
    children: [Disease!]
    proteins: [Protein!]
    synonyms: [Synonym!]
    variants: [Variant!]
    publications: [Publication!]
    isGroup: Boolean
}

type Protein {
    proteinId: String!
    proteinName: String!
    accession: String!
    gene: String
    description: String
    proteinCrossRefs: [ProteinCrossRef!]
    interactions: [Interaction!]
    variants: [Variant!]
    diseases: [Disease!]
    geneCoordinates: [GeneCoordinate!]
    publications: [Publication!]
    isExternallyMapped: Boolean
}
type Variant {
    type: String
    cvId: String
    ftId: String
    description: String
    alternativeSequence: String
    begin: String
    end: String
    molecule: String
    xrefs: [DbReferenceObject!]
    evidences: [VariationEvidence!]
    wildType: String
    frequency: Float
    polyphenPrediction: String
    polyphenScore: Float
    siftPrediction: String
    siftScore: Float
    somaticStatus: Int
    cytogeneticBand: String
    consequenceType: String
    genomicLocation: String
    association: [VariantAssociation!]
    clinicalSignificances: String
    sourceType: VariantSourceTypeEnum
}

type DbReferenceObject {
    name: String
    id: String
    url: String
    alternativeUrl: String
    reviewed: Boolean
}

type VariationEvidence {
    code: String
    label: String
    source: DbReferenceObject
}

type VariantAssociation {
    name: String
    description: String
    xrefs: [DbReferenceObject!]
    evidences: [VariationEvidence!]
    disease: Boolean
}

enum VariantSourceTypeEnum{
    large_scale_study uniprot, mixed
}

type ProteinCrossRef {
    primaryId: String
    description: String
    dbType: String
    isoformId: String
    drugs: [Drug!]
}

type Drug {
    name: String
    sourceType: String
    sourceId: String
    moleculeType: String
    clinicalTrialPhase: Int
    mechanismOfAction: String
    clinicalTrialLink: String
    drugEvidences: [DrugEvidence!]
}

type DrugEvidence {
    refType: String
    refUrl: String
}

type Interaction {
    type: String
    accession: String
    gene: String
    experimentCount: Int
    firstInteractor: String
    secondInteractor: String
}

type GeneCoordinate {
    chromosomeNumber: String
    startPos: Int
    endPos: Int
    enGeneId: String
    enTranscriptId: String
    enTranslationId: String
}

type Synonym{
    name: String
    source: String
}


type Publication {
    pubType: String
    pubId: String
}

input DiseaseFilter{
    nameContains: String
    descriptionContains: String
}
